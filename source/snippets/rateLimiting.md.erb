**Handle "Rate Limit Exceeded" error**<br/>
In order to prevent abuse and undue stress on the Smartsheet servers, the API has a rate limiting feature that restricts users to **300** requests per minute per Access Token. 
Certain resource intensive operations, such as attaching a file and getting cell history, count as 10 requests to prevent abuse of these operations. 
We reserve the right to enforce this limit depending on the load on our systems. 
If and when the limit is enforced, any requests that exceed this limit will be rejected with an **429** HTTP status code, along with the following JSON response body:

`{`<br/>
&#160;&#160;&#160;&#160;`"errorCode": 4003,`<br/>
&#160;&#160;&#160;&#160;`"message": "Rate limit exceeded."`<br/>
`}`

We recommend that you design your integration to gracefully handle this rate limit error. 
One way of doing that would be to have your integration *sleep* for 60 seconds when this error is encountered, and then subsequently retry the request. 
Alternatively, you might choose to implement [exponential backoff](https://en.wikipedia.org/wiki/Exponential_backoff) (an error handling strategy whereby you periodically retry a failed request with progressively longer wait times between retries, until either the request succeeds or the certain number of retry attempts is reached). 

**Avoid executing "rapid fire" updates**<br/>
If the only thing your integration does is execute an [Update Row(s)](#update-row(s)) request once every second for the same sheet, that would only amount to a total of 60 requests per minute -- well within rate limiting guidelines. 
However, updating the same object in such rapid succession could result in save errors that negatively impact both your integration as well as user experience within the Smartsheet app. 
To avoid this scenario, design your integration such that API requests are never executed with rapid-fire succession against the same Smartsheet object. 
For maximum efficiency, consider batching up changes and submitting them in a single request using a [bulk-enabled operation](#bulk-insert-operations) (for example, [Update Row(s)](#update-row(s)) or [Add Column(s)](#add-column(s))).

**Execute requests serially**<br/>
Executing multiple API requests in parallel to update a specific Smartsheet object will result in reduced performance and will often result in errors due to save collisions. 
To avoid this scenario, design your integration such that API requests to update a specific Smartsheet object are always executed serially (i.e., execute one request at time, not beginning the next request until the previous request has completed).

<aside class="notice">Attempts to perform multiple concurrent updates to a sheet may result in <a href="#error-handling">error code 4004</a>.</aside>
